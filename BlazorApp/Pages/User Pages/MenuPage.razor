@page "/menu"
@inject IItemSQLData itemData
@inject NavigationManager navigationManager
@using Microsoft.Extensions.Logging
@inject ILogger<MenuPage> log

@if (String.IsNullOrEmpty(message) == false)
{
    <div class="alert alert-danger">@message</div>
}

@if (items.Count > 0)
{
    @if (showOrderSummary == false)
    {
        <h3 class="text-black-50">Menu</h3>

        <div class="row">
            <div class="col-md-6">
                <p class="text-info align-self-center">Food Menu</p>
                <table class="table table-striped">
                    <thead class="thead-dark">
                        <tr>
                            <th>Item Name</th>
                            <th>Cost ($)</th>
                            <th>Quantity</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in items)
                        {
                            if (item.ItemType == EntryType.Food.ToString() && item.Quantity > 0)
                            {
                                <tr @onclick="(()=>HandleOnClick(item.Id))">
                                    <td>@item.ItemName</td>
                                    <td>@item.Cost</td>
                                    <td>
                                        <button class="btn oi oi-plus" @onclick="(()=>AddCart(item))"></button>
                                        <button class="btn oi oi-minus" @onclick="(()=>RemoveFromCart(item))"></button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>

                <p class="text-info align-self-center">Drink Menu</p>
                <table class="table table-striped">
                    <thead class="thead-dark">
                        <tr>
                            <th>Item Name</th>
                            <th>Cost ($)</th>
                            <th>Quantity</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in items)
                        {
                            if (item.ItemType == EntryType.Drink.ToString())
                            {
                                <tr @onclick="(()=>HandleOnClick(item.Id))">
                                    <td>@item.ItemName</td>
                                    <td>@item.Cost</td>
                                    <td>
                                        <button class="btn oi oi-plus" @onclick="(()=>AddCart(item))"></button>
                                        <button class="btn oi oi-minus" @onclick="(()=>RemoveFromCart(item))"></button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>

            @if (cart.Count > 0)
            {
                <div class="col-md-4">
                    <p class="text-info">Cart</p>
                    <table class="table table-striped">
                        <thead class="thead-dark">
                            <tr>
                                <th>Item Name</th>
                                <th>Cost per item</th>
                                <th>Quantity</th>
                                <th>Total cost</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in cart)
                            {
                                <tr>
                                    <td>@item.ItemName</td>
                                    <td>@item.Cost</td>
                                    <td>@item.Quantity</td>
                                    <td>@item.Total</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <button class="btn btn-dark mx-2 my-1 float-right" type="submit" @onclick="OnOrderConfirmClick">Confirm Order</button>
                    <button class="btn btn-dark mx-2 my-1 float-left" type="submit" @onclick="OnOrderClearClick">Clear Order</button>
                </div>
            }
        </div>
    }
    else
    {
        <div class="col-md-6">
            <OrderDetailsPage cartItems="cart.ToList<ICartModel>()" OrderPlaced="HandleOrderPlaced"></OrderDetailsPage>
            @if (returnToMenuTrigger == false)
            {
                <button class="btn btn-primary my-2" @onclick="(()=>showOrderSummary=false)">Back to Order Details</button>
            }
            else
            {
                <button class="btn btn-primary my-2" @onclick="(()=> { showOrderSummary = false; cart = new List<DisplayCartModel>(); })">Back to Menu</button>
            }
        </div>
    }
}
else
{
    <div class="d-flex align-items-center">
        <trong>Rumaging around the kitchen...</trong>
        <div class="spinner-border mx-3" role="status"></div>
    </div>
}



@code {
    bool showOrderSummary = false;
    bool returnToMenuTrigger = false;

    Action RefreshRequested;

    List<DisplayCartModel> cart = new List<DisplayCartModel>();

    string message = "";

    List<IItemEntryModel> items = new List<IItemEntryModel>();

    protected override async Task OnParametersSetAsync()
    {
        log.LogDebug("Fetching all items from database");
        items = await itemData.ReadAllItems();
        log.LogDebug("Found {itemCount} in inventory", items.Count);
    }

    private void HandleOnClick(int id)
    {
        //message = id.ToString();
    }

    private void AddCart(IItemEntryModel item)
    {
        var entry = cart.Where(x => x.ItemName == item.ItemName).ToList().FirstOrDefault();

        if (entry != null)
        {
            if (entry.Quantity == item.Quantity)
            {
                log.LogInformation("Item is out of stock, throwing Alert message");

                message = "Sorry, but this item is no longer available";

                log.LogInformation("Starting timer at {time}",DateTime.Now);

                var timer = new System.Timers.Timer(5000);
                timer.Enabled = true;
                timer.AutoReset = false;
                timer.Elapsed += new System.Timers.ElapsedEventHandler(OnTimeElapsed);
            }
            else
            {
                entry.Quantity++;
            }
        }
        else
        {
            var p = new DisplayCartModel();

            p.ItemName = item.ItemName;
            p.Cost = item.Cost;
            p.Quantity = 1;

            cart.Add(p);
        }

    }

    private void OnTimeElapsed(object source, EventArgs e)
    {
        log.LogInformation("Reseting the message to empty at {time}",DateTime.Now);
        message = "";
        log.LogInformation("Exiting the thread");
    }

    private void RemoveFromCart(IItemEntryModel item)
    {
        var entry = cart.Where(x => x.ItemName == item.ItemName).ToList().FirstOrDefault();

        if (entry != null)
        {
            if (entry.Quantity > 1)
            {
                entry.Quantity--;
            }
            else
            {
                cart.Remove(entry);
            }
        }
    }

    private void OnOrderConfirmClick()
    {
        message = "Please confirm receipt";

        showOrderSummary = true;
        returnToMenuTrigger = false;
    }
    private void OnOrderClearClick()
    {
        message = "Order Cleared";

        cart.Clear();
    }

    private async void HandleOrderPlaced()
    {
        message = "Order confirmed!";
        returnToMenuTrigger = true;

        List<IItemEntryModel> items = await itemData.ReadAllItems();
        var itemsToUpdate = from inventory in items
                            join purchaseitems in cart
                            on inventory.ItemName equals purchaseitems.ItemName
                            select inventory;

        itemsToUpdate.ToList().ForEach(async x =>
        {
            foreach (var item in cart)
            {
                if (x.ItemName == item.ItemName)
                {
                    log.LogInformation(1, ("Updating entry {itemName} with inventory change from {currentInventory}"), x.ItemName, x.Quantity);
                    x.Quantity -= item.Quantity;
                    log.LogInformation(1, (" to {updatedInventory}"), x.Quantity);

                    await itemData.UpdateItem(x);
                }
            }

        });
    }

}
