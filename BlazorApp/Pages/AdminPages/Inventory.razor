@page "/admin/inventory"
@inject IItemSQLData itemData

<h3>Inventory</h3>

<div class="col">
    <EditForm Model="search" OnValidSubmit="HandleSearch">
        <div class="input-group">
            <div class="input-group-prepend">
                <label class="input-group-text">Search</label>
            </div>
            <div>
                @*<InputText class="form-control"  @bind-Value="search.SearchTerm"></InputText>*@
                <input @bind-value="search.SearchTerm" @bind-value:event="oninput" placeholder="Enter Text to Search..." />
            </div>
            <div class="input-group-append">
                <button class="btn input-group-text" type="submit">Go</button>
            </div>
        </div>
    </EditForm>
</div>


<div class="row">
    <div class="col-lg-8">
        <button class="btn btn-success oi oi-plus float-right mx-2 my-1" @onclick="(() => { HidePages(); showAddPage = true; })"></button>
        <table class="table table-striped table-hover" contenteditable="true" data->
            <thead class="thead-dark">
                <tr>
                    <th>Id</th>
                    <th>Type</th>
                    <th>Item</th>
                    <th>Cost</th>
                    <th>Quantity</th>
                    <th></th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @*@foreach (var item in items)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.ItemType</td>
                <td>@item.ItemName</td>
                <td>@item.Cost</td>
                <td>@item.Quantity</td>
                <td><button class="btn btn-dark oi oi-pencil" @onclick="(() => HandleOnUpdate(item.Id))"></button></td>
                <td><button class="btn btn-danger oi oi-x"></button></td>
            </tr>
        }*@
                @foreach (var item in filteredItems)
                {
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.ItemType</td>
                        <td>@item.ItemName</td>
                        <td>@item.Cost</td>
                        <td>@item.Quantity</td>
                        <td><button class="btn btn-dark oi oi-pencil" @onclick="(() => HandleOnUpdate(item.Id))"></button></td>
                        <td><button class="btn btn-danger oi oi-x"></button></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="col-lg-4">
        @if (showUpdatePage != false)
        {
            <UpdateEntry Id="idToEdit" OnUpdate="HandleOnUpdated"></UpdateEntry>
        }
        @if (showAddPage != false)
        {
            <AddEntries OnAdd="HandleOnAdded"></AddEntries>
        }
    </div>
</div>



@code {
    List<IItemEntryModel> items = new List<IItemEntryModel>();
    List<IItemEntryModel> filteredItems => items.Where(x => x.ItemName.ToLower().Contains(search.SearchTerm.ToLower())).ToList();

    Search search = new Search();

    int idToEdit = 0;
    bool showAddPage = false;
    bool showUpdatePage = false;

    protected override async Task OnParametersSetAsync()
    {
        items = await itemData.ReadAllItems();
    }

    /// <summary>
    /// Handles EventCallback from AddEntries
    /// </summary>
    /// <param name="addedItem"></param>
    private void HandleOnAdded(IItemEntryModel addedItem)
    {
        items.Add(addedItem);

        showAddPage = false;
    }

    //private async Task HandleSearch()
    //{
    //    items - await itemData.FindItem
    //}

    private void HandleOnUpdate(int id)
    {
        HidePages();

        idToEdit = id;
        showUpdatePage = true;
    }

    /// <summary>
    /// Handles the EventCallback from Update
    /// </summary>
    private void HandleOnUpdated(IItemEntryModel updatedItem)
    {
        showUpdatePage = false;

        IItemEntryModel itemToUpdate = items.Where(x => x.Id == updatedItem.Id).FirstOrDefault();

        if (itemToUpdate != null)
        {
            itemToUpdate.ItemName = updatedItem.ItemName;
            itemToUpdate.ItemType = updatedItem.ItemType;
            itemToUpdate.Cost = updatedItem.Cost;
            itemToUpdate.Quantity = updatedItem.Quantity;
        }
    }

    private void HidePages()
    {
        showAddPage = false;
        showUpdatePage = false;
    }

    /// <summary>
    /// Search Function
    /// </summary>
    private async Task HandleSearch()
    {
        if (!String.IsNullOrEmpty(search.SearchTerm))
        {
            items = await itemData.Search(search.SearchTerm);
        }
    }
}
