@*@page "/admin/addentries"*@
@inject IItemSQLData itemData

<span class="text-success">@message</span>

<EditForm Model="item" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label>Type</label>
        <InputSelect @bind-Value="item.ItemType" class="form-control">
            <option>Select a Type...</option>
            @foreach (var i in Enum.GetValues(typeof(EntryType)))
            {
                <option>@i</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label>Name</label>
        <InputText @bind-Value="item.ItemName" class="form-control"></InputText>
    </div>
    <div class="form-group">
        <label>Cost</label>
        <div class="input-group">
            <div class="input-group-prepend">
                <span class="input-group-text">$</span>
            </div>
            <InputNumber @bind-Value="item.Cost" class="form-control"></InputNumber>
        </div>
    </div>
    <div class="form-group">
        <label>Quantity</label>
        <InputNumber @bind-Value="item.Quantity" class="form-control"></InputNumber>
    </div>
    <button class="btn btn-dark" type="submit">Submit</button>
    <button class="btn btn-dark float-right" type="reset">Clear</button>
</EditForm>

@code {

    string message = "";

    [Parameter]
    public EventCallback<IItemEntryModel> OnAdd { get; set; }

    IItemEntryModel item = new DisplayItemEntry();

    private async Task HandleValidSubmit()
    {
        await itemData.AddItem(item);

        message = $"{item.Quantity} no(s) of {item.ItemName} has been added to inventory";

        await OnAdd.InvokeAsync(item);

        item = new DisplayItemEntry();

    }
}
