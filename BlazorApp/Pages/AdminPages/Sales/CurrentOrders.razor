@page "/admin/currentorders"
@attribute [Authorize(Roles="Administrator")]
@inject IItemSQLData itemData
@inject ILogger<CurrentOrders> log

<strong class="text-info">Current Orders</strong>

<table class="table table-striped">
    <thead class="thead-dark">
        <tr>
            <th>Id</th>
            <th>Customer Name</th>
            <th>Order Date</th>
            <th>Order Complete</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var order in filteredOrders)
        {
            <tr>
                <td>@order.Id</td>
                <td>@order.CustomerName</td>
                <td>@order.OrderDate</td>
                <td>
                    @if (order.Id == idToEdit)
                    {
                        <button class="btn btn-success" @onclick="(()=>CompleteOrder(order))">Confirm Completed</button>
                    }
                    else
                    {
                        <button class="btn btn-outline-success" @onclick="(()=>idToEdit = order.Id)">Mark as Complete</button>
                    }
                </td>
            </tr>
        }

    </tbody>
</table>

@code {
    List<IOrderModel> ordersToComplete = new List<IOrderModel>();
    List<IOrderModel> filteredOrders => ordersToComplete.Where(x => x.OrderCompleted == false).ToList();
    bool completeButtonTrigger = false;
    int idToEdit = 0;

    protected override async Task OnParametersSetAsync()
    {
        log.LogDebug("Fetching all the order to complete from Database");
        ordersToComplete = await itemData.ReadPendingOrders();
        log.LogDebug("Retrieved {orderToCompleteCount} pending Orders", ordersToComplete.Count);
    }

    private async void CompleteOrder(IOrderModel order)
    {
        log.LogInformation("Marking order {orderId} as completed", order.Id);

        await itemData.UpdateOrderModel(order);
        log.LogDebug("Completed updating order {orderId}",order.Id);

        log.LogInformation("Updating order in UI");
        order.OrderCompleted = true;
    }
}
