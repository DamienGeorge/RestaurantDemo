@page "/admin/editadmin"
@attribute [Authorize(Roles = "Administrator")]

@inject IIdentityDataAccess userData
@inject UserManager<IdentityUser> userManager
@inject RoleManager<IdentityRole> roleManager



<h3>Add a person to admin list</h3>

@if (!String.IsNullOrEmpty(message))
{
    <span class="@cssValue">@message</span>
}

<EditForm Model="user">
    <DataAnnotationsValidator />
    <InputSelect @bind-Value="user.Email">
        <option>Please select a user...</option>
        @foreach (var u in users)
        {
            <option>@u.Email</option>
        }
    </InputSelect>
    <button class="btn btn-dark" type="submit" @onclick="HandleAddAdmin">Make Admin</button>
    <button class="btn btn-danger" type="submit" @onclick="HandleRevokeAdmin">Revoke Admin</button>
</EditForm>


@code {
    string message = "";
    string cssValue = "";

    List<IdentityUser> users = new List<IdentityUser>();
    IdentityUser user = new IdentityUser();
    protected override async Task OnParametersSetAsync()
    {
        var userListGeneric = await userData.FetchUser<IdentityUser>();

        users = userListGeneric.ToList<IdentityUser>();
    }

    private async Task HandleAddAdmin()
    {

        if (PreliminaryCheck() == false)
        {
            return;
        }

        bool isAdmin = await CheckUserRole();

        if (!isAdmin)
        {
            await userManager.AddToRoleAsync(user, "Administrator");
            message = $"{user.Email} is now an Admin. Please request them to re-login for the permissions to take effect";
            cssValue = "text-success";
        }
        else
        {
            message = $"{user.Email} is already an Admin";
            cssValue = "text-danger";
        }

        user = new IdentityUser();
    }

    private async Task HandleRevokeAdmin()
    {
        if (PreliminaryCheck() ==false)
        {
            return;
        }

        bool isAdmin = await CheckUserRole();

        if (isAdmin)
        {
            await userManager.RemoveFromRoleAsync(user, "Administrator");
            message = $"{user.Email} is no longer an Admin. Please request them to re-login for the permissions to take effect";
            cssValue = "text-success";
        }
        else
        {
            message = $"{user.Email} is not an Admin";
            cssValue = "text-danger";
        }
        user = new IdentityUser();
    }

    private bool PreliminaryCheck()
    {
        if (user.Email is null)
        {
            message = "Please select a valid user!";
            cssValue = "text-danger";
            return false;
        }

        return true;
    }

    private async Task<bool> CheckUserRole()
    {
        user = await userManager.FindByEmailAsync(user.Email);

        return await userManager.IsInRoleAsync(user, "Administrator");

    }
}
